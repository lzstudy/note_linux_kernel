starce基本使用
==============

1. 选项说明
-----------

.. code:: c

   # 运行推荐选项
   strace -a 40 -tt -T -o trace.log

   # 统计推荐选项
   strace -c 

1.1 输出类选项
**************

==== ================================== ==========================================================
选项 说明                               演示
-A   在使用-o选项后, 使用-A会追加日志
-a   设置返回值输出位置, 默认40         设置会更好看
-i   打印调用位置(内存地址)             [0000ffff80a5382c]
-o   日志输出目录
-r   打印相对时间戳                     (+ 0.000090) brk(0xaaaad62ba000)
-s   指定打印字符串长度(默认32)
-t   显示时间, 单位s, 一般推荐使用-tt   ``01:40:38write`` (1, "hello  tracefs\n", 15hello  tracefs
-tt  输出时间, 到us                     ``01:41:08.554867`` close(1) = 0 <0.000024>
-T   输出每个系统调用使用时间           close(1) = 0 ``<0.000024>``
-v   verbose模式(冗余模式)会输出很多
==== ================================== ==========================================================

1.2 统计类选项
**************

==== ================================== ========================================================================
选项 说明                               演示
-c   统计数据, 调用次数等
-O   
-S   排序, 默认按时间(calls, errors等)
-w   汇总系统调用延时
==== ================================== ========================================================================

1.3 过滤选项
************

==== ================================== ========================================================================
选项 说明                               演示
-e   expr/options -e trace=file/raw/... 追踪指定的类型或者某个系统调用
-p   追踪访问路径
-z   只追踪返回没有错误的系统调用
-Z   只追踪返回错误的系统调用
==== ================================== ========================================================================

2 典型应用
-----------

2.1 带时间戳跟踪线程
********************

.. code:: c

   strace -tt -T -o trace.log ls

   # 时间          系统调用(传输参数)                       返回值   此系统调用使用时间(s)
   01:29:51.330261 execve("/bin/ls", ["ls"], 0xffffd01822f0 /* 22 vars */) = 0 <0.000431>
   01:29:51.331092 brk(NULL)               = 0xaaab056d1000 <0.000021>
   01:29:51.331853 openat(AT_FDCWD, "/lib/libcap.so.2", O_RDONLY|O_CLOEXEC) = 3 <0.000045>
   ...
   01:29:51.336351 exit_group(0)           = ?
   01:29:51.336663 +++ exited with 0 +++

.. tip::

   - 保存日志到本地 ``strace -tt -T -s 100 -o trace.log``
   - 追踪并保存 ``strace -tt -T -s 100 -o trace.log -p $PID``
   - strace -r xxx 打印相对时间戳也很好用
   - strace -i xxx 会打印指令调用地址 [0000ffff80a5382c] close

2.2 跟踪程序打开的哪个配置文件(尤其是无源码的库文件)
****************************************************

.. code:: c

   strace php 2>&1 | grep php.ini
   
   open("usr/local/bin/php.ini", O_RDONLY) = -1 ENOENT (No such file or directory)
   open("usr/local/lib/php.ini", O_RDONLY) = 4
   ...

   # 从上面代码来看, php程序先打开/usr/local/bin/php.ini, 打开失败后在去lib下找

2.3 在2的基础上指定特定的系统调用
**********************************

.. code:: c

   strace -e open,access 2>&1 | grep php.ini

   # 该命令只会查open, access调用

2.4 解决进程卡死或者cpu占用很高
*******************************

.. code:: c

   strace -p 1234

2.5 查看系统调用时间
********************

.. code:: c

   # 直接监视
   strace -c -tt xxx

   # 先附着在程序上, 执行完后打印
   strace -c -tt -p 1234

   # 不打印输出, 只看结果
   strace -c -tt > /dev/null xxx
   strace -c -tt > /dev/null ls

- 参考例子

.. code:: c

   strace -c -tt ls

   % time     seconds  usecs/call     calls    errors syscall
   ------ ----------- ----------- --------- --------- ----------------
   25.74     0.000052          26         2           getdents64
   21.78     0.000044          14         3           ioctl
   18.81     0.000038           6         6           close
   0.00      0.000000           0         1         1 faccessat
   ...
   ------ ----------- ----------- --------- --------- ----------------
   100.00    0.000202                    43         1 total

.. note::

   - %time      : 时间占用百分比
   - seconds    : 该系统调用占用时间 = usecs/call * calls
   - usecs/call : 每次系统调用占用的时间, 单位us
   - calls      : 调用次数

2.6 查看网络问题
****************

.. code:: c

   strace -e poll,select,connect,recvfrom,sendto nc www.new.com 80
